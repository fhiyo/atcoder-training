(defun calcWindPower(dis)
  (labels ((r (val)
              (values (floor (+ 0.5 val))))
           (round_ (val decimal_place)
                   (assert (> decimal_place 0))
                   (let ((n (* 10 decimal_place)))
                     (/ (r (* val n)) n))))
    (let ((wind_speed 0))
      (setq wind_speed (float (round_ (/ dis 60) 1)))
      (cond ((and (>= wind_speed 0.0) (<= wind_speed 0.2)) 0)
            ((and (>= wind_speed 0.3) (<= wind_speed 1.5)) 1)
            ((and (>= wind_speed 1.6) (<= wind_speed 3.3)) 2)
            ((and (>= wind_speed 3.4) (<= wind_speed 5.4)) 3)
            ((and (>= wind_speed 5.5) (<= wind_speed 7.9)) 4)
            ((and (>= wind_speed 8.0) (<= wind_speed 10.7)) 5)
            ((and (>= wind_speed 10.8) (<= wind_speed 13.8)) 6)
            ((and (>= wind_speed 13.9) (<= wind_speed 17.1)) 7)
            ((and (>= wind_speed 17.2) (<= wind_speed 20.7)) 8)
            ((and (>= wind_speed 20.8) (<= wind_speed 24.4)) 9)
            ((and (>= wind_speed 24.5) (<= wind_speed 28.4)) 10)
            ((and (>= wind_speed 28.5) (<= wind_speed 32.6)) 11)
            ((>= wind_speed 32.7) 12)))))

(defun convertDirection(deg wind_power)
  (let ((step 225))
    (cond ((= wind_power 0) 'C)
          ((and (>= deg (+ 112.5 (* step 0))) (< deg (+ 337.5 (* step 0)))) 'NNE)
          ((and (>= deg (+ 112.5 (* step 1))) (< deg (+ 337.5 (* step 1)))) 'NE)
          ((and (>= deg (+ 112.5 (* step 2))) (< deg (+ 337.5 (* step 2)))) 'ENE)
          ((and (>= deg (+ 112.5 (* step 3))) (< deg (+ 337.5 (* step 3)))) 'E)
          ((and (>= deg (+ 112.5 (* step 4))) (< deg (+ 337.5 (* step 4)))) 'ESE)
          ((and (>= deg (+ 112.5 (* step 5))) (< deg (+ 337.5 (* step 5)))) 'SE)
          ((and (>= deg (+ 112.5 (* step 6))) (< deg (+ 337.5 (* step 6)))) 'SSE)
          ((and (>= deg (+ 112.5 (* step 7))) (< deg (+ 337.5 (* step 7)))) 'S)
          ((and (>= deg (+ 112.5 (* step 8))) (< deg (+ 337.5 (* step 8)))) 'SSW)
          ((and (>= deg (+ 112.5 (* step 9))) (< deg (+ 337.5 (* step 9)))) 'SW)
          ((and (>= deg (+ 112.5 (* step 10))) (< deg (+ 337.5 (* step 10)))) 'WSW)
          ((and (>= deg (+ 112.5 (* step 11))) (< deg (+ 337.5 (* step 11)))) 'W)
          ((and (>= deg (+ 112.5 (* step 12))) (< deg (+ 337.5 (* step 12)))) 'WNW)
          ((and (>= deg (+ 112.5 (* step 13))) (< deg (+ 337.5 (* step 13)))) 'NW)
          ((and (>= deg (+ 112.5 (* step 14))) (< deg (+ 337.5 (* step 14)))) 'NNW)
          (t 'N))))

(defun main()
  (let ((deg (read)) (dis (read)) (wind_power 0) (direction ""))
    (setq wind_power (calcWindPower dis))
    (setq direction (convertDirection deg wind_power))
    (format t "~S ~D~%" direction wind_power)))

(main)
